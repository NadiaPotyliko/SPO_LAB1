#include <iostream>
#include <windows.h>
#include <tchar.h>

using namespace std;
#define INFO_BUFFER_SIZE 3276
#define MAX_KEY_LENGTH 255

int main(){
  LARGE_INTEGER lpPerformanceCount_s;
  QueryPerformanceCounter(&lpPerformanceCount_s); //–≤—ã–¥–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å—Ç–µ—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  // 1.1 // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π  —Å–∏—Å—Ç–µ–º—ã
  OSVERSIONINFO osVers = { 0 };// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω—É–ª–µ–≤—ã–º–∏ –±–∞–π—Ç–∞–º–∏ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å C89).
  osVers.dwOSVersionInfoSize = sizeof(OSVERSIONINFO); // WinAPI —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—Ä–∞—Å—à–∏—Ä—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –û–°.
  GetVersionEx(&osVers); // –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –û–°
  printf("Windows v%d.%d (build %d)\n", osVers.dwMajorVersion, osVers.dwMinorVersion, osVers.dwBuildNumber);

  // 1.2 // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ  —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ  –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –µ–≥–æ –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
  TCHAR system_dir[INFO_BUFFER_SIZE];
  DWORD CountBuf = INFO_BUFFER_SIZE;
  GetSystemDirectory(system_dir, INFO_BUFFER_SIZE);
  printf("\nSystem directory: %s \n", system_dir);

  // 1.3 // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  CountBuf = INFO_BUFFER_SIZE;
  GetComputerName(system_dir, &CountBuf);  //–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  printf("\nComputer name: %s\n", system_dir);
  GetUserName(system_dir, &CountBuf);//–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  printf("    User name: %s\n", system_dir);

  // 1.4 // –í—ã–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–º–∞ —Å–ª—É–∂–µ–±–Ω–æ–µ –∏–º—è, –ø–µ—Ä–≤—ã–π –ø—É—Ç—å, –æ–±—ä—ë–º –∏ –∫–æ–ª–∏—á–µ—Å–∫—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
  DWORD CharCount = MAX_PATH;
  char buffer[MAX_PATH];
  CHAR firstN[MAX_PATH+1];
  ULARGE_INTEGER total, available;

  HANDLE search = FindFirstVolume(buffer, sizeof(buffer));
  do {
    GetVolumePathNamesForVolumeName(buffer, firstN, CharCount, &CharCount);
    printf("\nNext name of tom: %s",buffer);
    printf("\nFirst path in tom: %s", firstN);

    if (GetDiskFreeSpaceEx((LPCSTR)firstN, (PULARGE_INTEGER)&available, (PULARGE_INTEGER)&total, NULL)==0) {
        cout << "\nNo information.\n";
    }
    else {
        cout << "\nVolume of tom:  " << total.QuadPart <<"  bytes, " ;
        cout << "\nFree place:  " << available.QuadPart <<"  bytes. " ;
        //printf("\n Free place:  = %lld\n", available.QuadPart); –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è
    }
  }while (FindNextVolume(search, buffer, sizeof(buffer))==1);\
  FindVolumeClose(search);

  // 1.5 // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º, –∑–∞–ø—É—Å–∫–∞–µ–º—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã
  DWORD dwSize;
  TCHAR szName[MAX_KEY_LENGTH];
  HKEY hKey;
  DWORD index = 0;
  DWORD retCode;
  DWORD BufferSize = 8192;
  DWORD cbData;

  PPERF_DATA_BLOCK PerfData = (PPERF_DATA_BLOCK)malloc(BufferSize);
  cbData = BufferSize;

  if (RegOpenKeyEx(HKEY_CURRENT_USER,
        "Software\\Microsoft\\Windows\\CurrentVersion\\Run",
        0, KEY_ALL_ACCESS, &hKey) != ERROR_SUCCESS){
    printf("\nRegOpenKeyEx() Error!\n");
  }
  else printf("\nRegOpenKeyEx() Good Job!\n");

  while (1) { // –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –ø–æ–∫–∞ –Ω–µ –æ–±–æ—Ä–≤–µ—Ç—Å—è break-–æ–º
    dwSize = sizeof(szName);
    retCode = RegEnumValue(hKey, index, szName, &dwSize, NULL, NULL, NULL, NULL);
    if (retCode == ERROR_SUCCESS){
        RegQueryValueEx(hKey, szName, NULL, NULL, (LPBYTE)PerfData, &cbData);
        printf("\n%d) %s %s", index + 1, szName, PerfData);
        index++;
    }
    else break;
  }
  RegCloseKey(hKey);

  // 2 // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¶–ü:
  LARGE_INTEGER lpPerformanceCount_f;
  LARGE_INTEGER lpFrequency;
  QueryPerformanceFrequency(&lpFrequency); //–∑–∞–º–µ—Ä —Ä–∞–±–æ—á–µ–π —á–∞—Å—Ç–æ—Ç—ã ùëì –¶–ü
  QueryPerformanceCounter(&lpPerformanceCount_f); //–ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–∫—Ç–æ–≤ Œîùë° –¶–ü, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ø—É–Ω–∫—Ç–∞ 1)

  printf("\n\nOperating frequency of CP = %lld Hz\n", lpFrequency.QuadPart);
  double Ncyc = 1e6 * ((double)lpPerformanceCount_f.QuadPart - (double)lpPerformanceCount_s.QuadPart) / (double)lpFrequency.QuadPart;
  std::cout<<"Number of program execution cycles = "<<Ncyc<<" ns\n";
  return 0;
}


